Go is object oriented

1 - Encapsulation 
state            -> "fields"
behavior         -> "methods"
access modifiers -> "exported / un-exported"

2 - Reusability
inheritence -> "embedded types"

3 - Polimorphism
"interfaces"

4 - Overriding
"promotion"

//////////////
Traditional OOP

Classes
-- data structure describing a type of object
-- you can then create "instances"/"objects" from the class/blue-print
-- classes hold both:
==== state / data / fields
==== behavior / methods
-- Public / private

Inheritence

//////////////
In Go:
- you don't create classes, you create types
- you don't instantiate, you create a value of a type